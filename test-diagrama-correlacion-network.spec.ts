import { test, expect } from '@playwright/test';

test.describe('Testing Diagrama de Correlaci√≥n de Red - KRONOS', () => {
    
    test.beforeEach(async ({ page }) => {
        // Navegar a la aplicaci√≥n KRONOS
        await page.goto('http://localhost:8000', { waitUntil: 'networkidle' });
        
        // Login (usando credenciales de ejemplo)
        await page.fill('input[type="text"]', 'admin');
        await page.fill('input[type="password"]', 'admin123');
        await page.click('button[type="submit"]');
        
        // Esperar a que cargue el dashboard
        await page.waitForLoadState('networkidle');
        await expect(page.locator('text=Dashboard')).toBeVisible();
    });

    test('TEST-001: Verificar que el bot√≥n Diagrama aparece en modal de correlaci√≥n', async ({ page }) => {
        console.log('üß™ Iniciando TEST-001: Bot√≥n Diagrama en modal correlaci√≥n');
        
        // Navegar a Misiones
        await page.click('text=Misiones');
        await page.waitForLoadState('networkidle');
        
        // Buscar misi√≥n con datos (deber√≠a haber al menos una misi√≥n de ejemplo)
        const misionCard = page.locator('.bg-secondary').first();
        await expect(misionCard).toBeVisible();
        
        // Hacer clic en "Ver Detalles" de la misi√≥n
        await misionCard.click();
        await page.waitForLoadState('networkidle');
        
        // Buscar secci√≥n de correlaci√≥n y hacer clic en "Ejecutar Correlaci√≥n"
        const executeButton = page.locator('text=Ejecutar Correlaci√≥n').first();
        
        if (await executeButton.isVisible()) {
            await executeButton.click();
            await page.waitForTimeout(2000); // Esperar procesamiento
            
            // Buscar el bot√≥n de tabla de correlaci√≥n
            const tableButton = page.locator('button:has-text("Tabla")').first();
            if (await tableButton.isVisible()) {
                await tableButton.click();
                await page.waitForTimeout(1000);
                
                // Verificar que el modal de tabla se abri√≥
                await expect(page.locator('text=Tabla de Correlaciones')).toBeVisible();
                
                // VALIDACI√ìN CR√çTICA: Verificar que existe el bot√≥n "Diagrama"
                const diagramButton = page.locator('button:has-text("Diagrama")');
                await expect(diagramButton).toBeVisible({ timeout: 5000 });
                
                console.log('‚úÖ Bot√≥n Diagrama encontrado en modal de correlaci√≥n');
                
                // Verificar que el bot√≥n no est√° deshabilitado si hay datos
                const isDisabled = await diagramButton.isDisabled();
                console.log(`üìä Estado del bot√≥n Diagrama - Deshabilitado: ${isDisabled}`);
                
                // Tomar screenshot del modal con bot√≥n Diagrama
                await page.screenshot({ 
                    path: 'C:\\Soluciones\\BGC\\claude\\KNSOft\\test-results\\diagrama-button-visible.png',
                    fullPage: true 
                });
                
            } else {
                console.log('‚ö†Ô∏è No se encontr√≥ bot√≥n de tabla, probablemente no hay datos de correlaci√≥n');
            }
        } else {
            console.log('‚ö†Ô∏è No se encontr√≥ bot√≥n "Ejecutar Correlaci√≥n", revisar estado de misiones');
        }
    });

    test('TEST-002: Probar apertura y cierre del NetworkDiagramModal', async ({ page }) => {
        console.log('üß™ Iniciando TEST-002: Apertura/cierre NetworkDiagramModal');
        
        // Navegar a misiones y obtener datos de correlaci√≥n
        await page.click('text=Misiones');
        await page.waitForLoadState('networkidle');
        
        const misionCard = page.locator('.bg-secondary').first();
        await misionCard.click();
        await page.waitForLoadState('networkidle');
        
        // Ejecutar correlaci√≥n y abrir tabla
        const executeButton = page.locator('text=Ejecutar Correlaci√≥n').first();
        if (await executeButton.isVisible()) {
            await executeButton.click();
            await page.waitForTimeout(3000); // M√°s tiempo para procesamiento
            
            const tableButton = page.locator('button:has-text("Tabla")').first();
            if (await tableButton.isVisible()) {
                await tableButton.click();
                await page.waitForTimeout(1000);
                
                // Intentar hacer clic en el bot√≥n Diagrama
                const diagramButton = page.locator('button:has-text("Diagrama")');
                if (await diagramButton.isVisible() && !(await diagramButton.isDisabled())) {
                    
                    console.log('üîÑ Haciendo clic en bot√≥n Diagrama...');
                    await diagramButton.click();
                    await page.waitForTimeout(1000);
                    
                    // VALIDACI√ìN CR√çTICA: Verificar que se abri√≥ el modal del diagrama
                    const diagramModal = page.locator('text=Diagrama de Correlaci√≥n de Red');
                    await expect(diagramModal).toBeVisible({ timeout: 5000 });
                    
                    console.log('‚úÖ NetworkDiagramModal se abri√≥ correctamente');
                    
                    // Verificar elementos del modal
                    await expect(page.locator('text=Objetivo:')).toBeVisible();
                    await expect(page.locator('text=nodos')).toBeVisible();
                    await expect(page.locator('text=conexiones')).toBeVisible();
                    
                    // Tomar screenshot del modal abierto
                    await page.screenshot({ 
                        path: 'C:\\Soluciones\\BGC\\claude\\KNSOft\\test-results\\diagrama-modal-open.png',
                        fullPage: true 
                    });
                    
                    // Probar cierre del modal con bot√≥n X
                    const closeButton = page.locator('button[title="Cerrar diagrama"]');
                    await expect(closeButton).toBeVisible();
                    await closeButton.click();
                    await page.waitForTimeout(500);
                    
                    // Verificar que el modal se cerr√≥
                    await expect(diagramModal).not.toBeVisible();
                    console.log('‚úÖ Modal se cerr√≥ correctamente con bot√≥n X');
                    
                    // Volver a abrir y probar cierre con Escape
                    await diagramButton.click();
                    await page.waitForTimeout(1000);
                    await expect(diagramModal).toBeVisible();
                    
                    await page.keyboard.press('Escape');
                    await page.waitForTimeout(500);
                    await expect(diagramModal).not.toBeVisible();
                    console.log('‚úÖ Modal se cerr√≥ correctamente con tecla Escape');
                    
                } else {
                    console.log('‚ö†Ô∏è Bot√≥n Diagrama no disponible (probablemente sin datos)');
                }
            }
        }
    });

    test('TEST-003: Verificar componentes internos del diagrama', async ({ page }) => {
        console.log('üß™ Iniciando TEST-003: Componentes internos del diagrama');
        
        // Navegar y abrir diagrama (siguiendo pasos anteriores)
        await page.click('text=Misiones');
        await page.waitForLoadState('networkidle');
        
        const misionCard = page.locator('.bg-secondary').first();
        await misionCard.click();
        await page.waitForLoadState('networkidle');
        
        const executeButton = page.locator('text=Ejecutar Correlaci√≥n').first();
        if (await executeButton.isVisible()) {
            await executeButton.click();
            await page.waitForTimeout(3000);
            
            const tableButton = page.locator('button:has-text("Tabla")').first();
            if (await tableButton.isVisible()) {
                await tableButton.click();
                await page.waitForTimeout(1000);
                
                const diagramButton = page.locator('button:has-text("Diagrama")');
                if (await diagramButton.isVisible() && !(await diagramButton.isDisabled())) {
                    await diagramButton.click();
                    await page.waitForTimeout(1000);
                    
                    const diagramModal = page.locator('text=Diagrama de Correlaci√≥n de Red');
                    await expect(diagramModal).toBeVisible();
                    
                    // VALIDACIONES DE COMPONENTES INTERNOS
                    
                    // 1. Verificar controles de layout
                    console.log('üîç Verificando controles de layout...');
                    await expect(page.locator('text=Layout:')).toBeVisible();
                    await expect(page.locator('select')).toBeVisible();
                    
                    // 2. Verificar estad√≠sticas
                    console.log('üîç Verificando estad√≠sticas...');
                    await expect(page.locator('text=nodos')).toBeVisible();
                    await expect(page.locator('text=conexiones')).toBeVisible();
                    
                    // 3. Verificar bot√≥n de expansi√≥n de controles
                    console.log('üîç Verificando bot√≥n de expansi√≥n...');
                    const expandButton = page.locator('button[title*="filtros"]');
                    if (await expandButton.isVisible()) {
                        await expandButton.click();
                        await page.waitForTimeout(500);
                        
                        // Verificar que aparecieron controles expandidos
                        await expect(page.locator('text=Niveles de Correlaci√≥n')).toBeVisible();
                        await expect(page.locator('text=Operadores')).toBeVisible();
                        await expect(page.locator('text=Vista y Exportaci√≥n')).toBeVisible();
                        
                        console.log('‚úÖ Controles expandidos funcionan correctamente');
                        
                        // Verificar botones de exportaci√≥n
                        await expect(page.locator('button:has-text("PNG")')).toBeVisible();
                        await expect(page.locator('button:has-text("SVG")')).toBeVisible();
                        await expect(page.locator('button:has-text("JSON")')).toBeVisible();
                        
                        console.log('‚úÖ Botones de exportaci√≥n presentes');
                    }
                    
                    // 4. Verificar √°rea del diagrama (placeholder FASE 4)
                    console.log('üîç Verificando √°rea del diagrama...');
                    const diagramArea = page.locator('.bg-gray-900');
                    await expect(diagramArea).toBeVisible();
                    
                    // Verificar placeholder de diagrama
                    await expect(page.locator('text=üîó')).toBeVisible();
                    await expect(page.locator('text=Diagrama de Red')).toBeVisible();
                    await expect(page.locator('text=nodos preparados para visualizaci√≥n')).toBeVisible();
                    
                    console.log('‚úÖ Placeholder del diagrama (FASE 4) presente');
                    
                    // Tomar screenshot final de componentes
                    await page.screenshot({ 
                        path: 'C:\\Soluciones\\BGC\\claude\\KNSOft\\test-results\\diagrama-components-expanded.png',
                        fullPage: true 
                    });
                }
            }
        }
    });

    test('TEST-004: Verificar que no hay regresiones en funcionalidad existente', async ({ page }) => {
        console.log('üß™ Iniciando TEST-004: Verificar no regresiones');
        
        // Navegar a misiones
        await page.click('text=Misiones');
        await page.waitForLoadState('networkidle');
        
        // Verificar que la funcionalidad base de misiones sigue funcionando
        const misionCard = page.locator('.bg-secondary').first();
        await expect(misionCard).toBeVisible();
        
        await misionCard.click();
        await page.waitForLoadState('networkidle');
        
        // Verificar que se puede ejecutar correlaci√≥n normalmente
        const executeButton = page.locator('text=Ejecutar Correlaci√≥n').first();
        if (await executeButton.isVisible()) {
            await executeButton.click();
            await page.waitForTimeout(3000);
            
            // Verificar que los botones de correlaci√≥n existentes siguen funcionando
            const tableButton = page.locator('button:has-text("Tabla")');
            const exportButton = page.locator('button:has-text("Exportar")');
            
            if (await tableButton.isVisible()) {
                console.log('‚úÖ Bot√≥n Tabla de correlaci√≥n funciona normalmente');
                
                await tableButton.click();
                await page.waitForTimeout(1000);
                
                // Verificar que el modal de tabla funciona normalmente
                await expect(page.locator('text=Tabla de Correlaciones')).toBeVisible();
                
                // Verificar filtros existentes
                await expect(page.locator('button:has-text("Todo")')).toBeVisible();
                await expect(page.locator('button:has-text("Llamadas")')).toBeVisible();
                await expect(page.locator('button:has-text("Datos")')).toBeVisible();
                
                // Verificar botones de exportaci√≥n existentes
                await expect(page.locator('button:has-text("CSV")')).toBeVisible();
                await expect(page.locator('button:has-text("Excel")')).toBeVisible();
                
                console.log('‚úÖ Funcionalidad existente de tabla no afectada');
                
                // Cerrar modal
                const closeTableButton = page.locator('button[title="Cerrar modal"]').first();
                if (await closeTableButton.isVisible()) {
                    await closeTableButton.click();
                    await page.waitForTimeout(500);
                }
            }
            
            if (await exportButton.isVisible()) {
                console.log('‚úÖ Bot√≥n Exportar de correlaci√≥n funciona normalmente');
            }
        }
        
        // Verificar navegaci√≥n general
        await page.click('text=Dashboard');
        await page.waitForLoadState('networkidle');
        await expect(page.locator('text=Dashboard')).toBeVisible();
        
        await page.click('text=Usuarios');
        await page.waitForLoadState('networkidle');
        await expect(page.locator('text=Gesti√≥n de Usuarios')).toBeVisible();
        
        console.log('‚úÖ Navegaci√≥n general del sistema no afectada');
    });

    test.afterEach(async ({ page, testInfo }) => {
        // Tomar screenshot final si el test falla
        if (testInfo.status !== 'passed') {
            await page.screenshot({ 
                path: `C:\\Soluciones\\BGC\\claude\\KNSOft\\test-results\\failure-${testInfo.title.replace(/[^a-z0-9]/gi, '_')}.png`,
                fullPage: true 
            });
        }
    });
});