#!/usr/bin/env python3
"""
DEBUG ESPEC√çFICO - N√∫mero 3104277553
===================================
El testing muestra que este n√∫mero EST√Å en los archivos pero NO en la BD.
Investigar espec√≠ficamente qu√© ocurre durante el proceso de carga.
"""

import pandas as pd
import os
import sys

# Archivos de prueba
TEST_FILES = [
    r"C:\Soluciones\BGC\claude\KNSOft\archivos\envioarchivosparaanalizar (1)\1-225211_LLAMADAS_ENTRANTES_POR_CELDA_545612_0.xlsx",
    r"C:\Soluciones\BGC\claude\KNSOft\archivos\envioarchivosparaanalizar (1)\1-225211_LLAMADAS_SALIENTES_POR_CELDA_545613_0.xlsx",
    r"C:\Soluciones\BGC\claude\KNSOft\archivos\envioarchivosparaanalizar (1)\2-225211_LLAMADAS_ENTRANTES_POR_CELDA_545614_0.xlsx",
    r"C:\Soluciones\BGC\claude\KNSOft\archivos\envioarchivosparaanalizar (1)\2-225211_LLAMADAS_SALIENTES_POR_CELDA_545615_0.xlsx"
]

TARGET_NUMBER = "3104277553"

def analizar_numero_especifico():
    print("AN√ÅLISIS ESPEC√çFICO DEL N√öMERO 3104277553")
    print("=" * 60)
    print(f"Buscando n√∫mero: {TARGET_NUMBER}")
    print()
    
    total_apariciones = 0
    archivos_con_numero = []
    
    for file_path in TEST_FILES:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è  Archivo no encontrado: {os.path.basename(file_path)}")
            continue
        
        print(f"Analizando: {os.path.basename(file_path)}")
        print("-" * 40)
        
        try:
            # Leer archivo
            df = pd.read_excel(file_path)
            print(f"  Total registros en archivo: {len(df)}")
            print(f"  Columnas: {list(df.columns)}")
            
            # Buscar el n√∫mero espec√≠fico
            apariciones_originador = 0
            apariciones_receptor = 0
            registros_encontrados = []
            
            if 'originador' in df.columns:
                # Buscar en originador (tanto con 57 como sin 57)
                mask_orig = df['originador'].astype(str).str.contains(TARGET_NUMBER, na=False)
                apariciones_originador = mask_orig.sum()
                
                if apariciones_originador > 0:
                    registros_orig = df[mask_orig]
                    for idx, row in registros_orig.iterrows():
                        registros_encontrados.append({
                            'tipo': 'originador',
                            'fila': idx,
                            'originador': row['originador'],
                            'receptor': row.get('receptor', 'N/A'),
                            'fecha_hora': row.get('fecha_hora', 'N/A'),
                            'celda_inicio': row.get('celda_inicio_llamada', 'N/A'),
                            'celda_final': row.get('celda_final_llamada', 'N/A')
                        })
            
            if 'receptor' in df.columns:
                # Buscar en receptor
                mask_recv = df['receptor'].astype(str).str.contains(TARGET_NUMBER, na=False)
                apariciones_receptor = mask_recv.sum()
                
                if apariciones_receptor > 0:
                    registros_recv = df[mask_recv]
                    for idx, row in registros_recv.iterrows():
                        registros_encontrados.append({
                            'tipo': 'receptor',
                            'fila': idx,
                            'originador': row.get('originador', 'N/A'),
                            'receptor': row['receptor'],
                            'fecha_hora': row.get('fecha_hora', 'N/A'),
                            'celda_inicio': row.get('celda_inicio_llamada', 'N/A'),
                            'celda_final': row.get('celda_final_llamada', 'N/A')
                        })
            
            total_en_archivo = apariciones_originador + apariciones_receptor
            total_apariciones += total_en_archivo
            
            print(f"  Apariciones como originador: {apariciones_originador}")
            print(f"  Apariciones como receptor: {apariciones_receptor}")
            print(f"  TOTAL en este archivo: {total_en_archivo}")
            
            if total_en_archivo > 0:
                archivos_con_numero.append(os.path.basename(file_path))
                print(f"  ‚úÖ N√öMERO ENCONTRADO EN ESTE ARCHIVO")
                
                print(f"  Detalles de registros encontrados:")
                for i, reg in enumerate(registros_encontrados, 1):
                    print(f"    Registro {i} (fila {reg['fila']}):")
                    print(f"      Tipo: {reg['tipo']}")
                    print(f"      Originador: {reg['originador']}")
                    print(f"      Receptor: {reg['receptor']}")
                    print(f"      Fecha: {reg['fecha_hora']}")
                    print(f"      Celda inicio: {reg['celda_inicio']}")
                    print(f"      Celda final: {reg['celda_final']}")
                    print()
            else:
                print(f"  ‚ùå N√∫mero NO encontrado en este archivo")
            
            print()
            
        except Exception as e:
            print(f"  ‚ùå Error procesando archivo: {e}")
            print()
    
    print("RESUMEN FINAL:")
    print("=" * 40)
    print(f"Total apariciones encontradas: {total_apariciones}")
    print(f"Archivos que contienen el n√∫mero: {len(archivos_con_numero)}")
    if archivos_con_numero:
        print(f"Archivos: {archivos_con_numero}")
    
    if total_apariciones > 0:
        print(f"‚úÖ CONFIRMADO: El n√∫mero {TARGET_NUMBER} S√ç EST√Å en los archivos de origen")
        print("‚ùå PROBLEMA: El n√∫mero no est√° llegando a la base de datos")
        print("üîç ACCI√ìN: Revisar algoritmo de carga espec√≠fico para este n√∫mero")
    else:
        print(f"‚ùå El n√∫mero {TARGET_NUMBER} NO est√° en ning√∫n archivo de prueba")
        print("üîç ACCI√ìN: Verificar si est√° en otros archivos o fechas diferentes")

def simular_procesamiento_numero():
    """Simular exactamente lo que pasar√≠a con este n√∫mero en el proceso de carga."""
    print("\n" + "=" * 60)
    print("SIMULACI√ìN DE PROCESAMIENTO DEL N√öMERO")
    print("=" * 60)
    
    # Simular diferentes transformaciones
    numero_original = "573104277553"  # Formato con prefijo
    numero_sin_prefijo = "3104277553"   # Formato sin prefijo
    
    print(f"N√∫mero original (con 57): {numero_original}")
    print(f"N√∫mero sin prefijo: {numero_sin_prefijo}")
    
    # Simular validaciones comunes
    validaciones = []
    
    # 1. Longitud
    if len(numero_sin_prefijo) >= 8:
        validaciones.append("‚úÖ Longitud v√°lida")
    else:
        validaciones.append("‚ùå Longitud inv√°lida")
    
    # 2. Solo d√≠gitos
    if numero_sin_prefijo.isdigit():
        validaciones.append("‚úÖ Solo d√≠gitos")
    else:
        validaciones.append("‚ùå Contiene caracteres no num√©ricos")
    
    # 3. Formato colombiano
    if numero_sin_prefijo.startswith('3') and len(numero_sin_prefijo) == 10:
        validaciones.append("‚úÖ Formato celular colombiano v√°lido")
    else:
        validaciones.append("‚ùå Formato celular colombiano inv√°lido")
    
    print("\nValidaciones simuladas:")
    for validacion in validaciones:
        print(f"  {validacion}")
    
    # Simular hash para duplicados
    import hashlib
    hash_sim = hashlib.md5(f"{numero_original}_{numero_sin_prefijo}".encode()).hexdigest()[:8]
    print(f"\nHash simulado para duplicados: {hash_sim}")
    
    # Simular normalizaci√≥n
    print(f"\nNormalizaci√≥n simulada:")
    print(f"  Input: {numero_original}")
    print(f"  Output: {numero_sin_prefijo}")
    print(f"  Preservado: {numero_original}")

if __name__ == "__main__":
    analizar_numero_especifico()
    simular_procesamiento_numero()