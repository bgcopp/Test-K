#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INVESTIGACI√ìN CR√çTICA - DIAGRAMA CORRELACI√ìN 3113330727
======================================================

Investigaci√≥n espec√≠fica del problema reportado por Boris:
El n√∫mero 3113330727 muestra 255 nodos cuando deber√≠a mostrar solo interacciones directas.

OBJETIVOS DE LA INVESTIGACI√ìN:
1. Consultar directamente la base de datos para obtener datos reales
2. Verificar cu√°ntos registros existen realmente para 3113330727
3. Analizar el servicio de correlaci√≥n paso a paso
4. Identificar exactamente d√≥nde se generan los 255 nodos
5. Comparar con el comportamiento esperado

Ejecutar: python debug_3113330727_investigation.py
"""

import sqlite3
import json
import sys
import os
from datetime import datetime
from pathlib import Path

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar servicios del backend
try:
    from services.correlation_service import CorrelationService
    from services.data_normalizer_service import DataNormalizerService
except ImportError as e:
    print(f"‚ùå Error importando servicios: {e}")
    print("Ejecutando investigaci√≥n b√°sica sin servicios...")

class DiagramInvestigator:
    def __init__(self):
        self.db_path = "kronos.db"
        self.target_number = "3113330727"
        self.investigation_results = {
            "target_number": self.target_number,
            "investigation_timestamp": datetime.now().isoformat(),
            "database_analysis": {},
            "correlation_service_analysis": {},
            "data_flow_analysis": {},
            "problem_diagnosis": "",
            "recommended_solution": "",
            "evidence": []
        }
    
    def verify_database_connection(self):
        """Verificar conexi√≥n a la base de datos"""
        print("üîå Verificando conexi√≥n a la base de datos...")
        
        if not os.path.exists(self.db_path):
            print(f"‚ùå Base de datos no encontrada: {self.db_path}")
            return False
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Verificar tablas existentes
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            print(f"üìä Tablas encontradas: {[table[0] for table in tables]}")
            
            conn.close()
            return True
        except Exception as e:
            print(f"‚ùå Error conectando a la base de datos: {e}")
            return False
    
    def analyze_target_number_in_database(self):
        """An√°lisis directo del n√∫mero objetivo en la base de datos"""
        print(f"üîç Analizando n√∫mero {self.target_number} directamente en la base de datos...")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Consulta 1: Buscar el n√∫mero como origen
        cursor.execute("""
            SELECT COUNT(*) as total_as_origin
            FROM cdr_data 
            WHERE origen = ?
        """, (self.target_number,))
        
        origin_count = cursor.fetchone()[0]
        print(f"üì± Registros donde {self.target_number} es ORIGEN: {origin_count}")
        
        # Consulta 2: Buscar el n√∫mero como destino
        cursor.execute("""
            SELECT COUNT(*) as total_as_destination
            FROM cdr_data 
            WHERE destino = ?
        """, (self.target_number,))
        
        destination_count = cursor.fetchone()[0]
        print(f"üì± Registros donde {self.target_number} es DESTINO: {destination_count}")
        
        # Consulta 3: Total de interacciones √∫nicas
        cursor.execute("""
            SELECT COUNT(DISTINCT destino) as unique_destinations
            FROM cdr_data 
            WHERE origen = ?
        """, (self.target_number,))
        
        unique_destinations = cursor.fetchone()[0]
        print(f"üéØ Destinos √∫nicos cuando {self.target_number} es origen: {unique_destinations}")
        
        # Consulta 4: Or√≠genes √∫nicos cuando es destino
        cursor.execute("""
            SELECT COUNT(DISTINCT origen) as unique_origins
            FROM cdr_data 
            WHERE destino = ?
        """, (self.target_number,))
        
        unique_origins = cursor.fetchone()[0]
        print(f"üéØ Or√≠genes √∫nicos cuando {self.target_number} es destino: {unique_origins}")
        
        # Consulta 5: An√°lisis detallado de interacciones
        cursor.execute("""
            SELECT destino, COUNT(*) as interaction_count
            FROM cdr_data 
            WHERE origen = ?
            GROUP BY destino
            ORDER BY interaction_count DESC
            LIMIT 10
        """, (self.target_number,))
        
        top_destinations = cursor.fetchall()
        print(f"üìä Top 10 destinos m√°s frecuentes:")
        for dest, count in top_destinations:
            print(f"  - {dest}: {count} interacciones")
        
        # Consulta 6: Buscar en per√≠odos espec√≠ficos
        cursor.execute("""
            SELECT DATE(fecha_inicio) as date, COUNT(*) as daily_count
            FROM cdr_data 
            WHERE origen = ? OR destino = ?
            GROUP BY DATE(fecha_inicio)
            ORDER BY daily_count DESC
            LIMIT 5
        """, (self.target_number, self.target_number))
        
        daily_activity = cursor.fetchall()
        print(f"üìÖ D√≠as con m√°s actividad:")
        for date, count in daily_activity:
            print(f"  - {date}: {count} registros")
        
        # Guardar resultados del an√°lisis de base de datos
        self.investigation_results["database_analysis"] = {
            "total_as_origin": origin_count,
            "total_as_destination": destination_count,
            "unique_destinations": unique_destinations,
            "unique_origins": unique_origins,
            "top_destinations": top_destinations,
            "daily_activity": daily_activity,
            "total_unique_interactions": unique_destinations + unique_origins
        }
        
        conn.close()
        
        # DIAGN√ìSTICO PRELIMINAR
        total_unique_nodes = unique_destinations + unique_origins
        print(f"\nüéØ AN√ÅLISIS PRELIMINAR:")
        print(f"   - Nodos √∫nicos esperados: {total_unique_nodes}")
        print(f"   - Nodos reportados en UI: 255")
        print(f"   - Diferencia: {255 - total_unique_nodes}")
        
        if total_unique_nodes < 255:
            print(f"‚ö†Ô∏è PROBLEMA IDENTIFICADO: Se est√°n agregando {255 - total_unique_nodes} nodos extra")
            self.investigation_results["problem_diagnosis"] = f"El diagrama muestra {255 - total_unique_nodes} nodos m√°s de los que existen en la base de datos"
        else:
            print(f"‚úÖ Los datos de la base parecen correctos")
    
    def test_correlation_service_directly(self):
        """Probar el servicio de correlaci√≥n directamente"""
        print(f"\nüîß Probando servicio de correlaci√≥n directamente...")
        
        try:
            # Importar y probar el servicio de correlaci√≥n
            correlation_service = CorrelationService()
            
            # Simular la llamada que hace el frontend
            print(f"üìû Llamando a get_correlations para {self.target_number}...")
            correlations = correlation_service.get_correlations(self.target_number)
            
            if correlations:
                print(f"üìä Correlaciones retornadas por el servicio: {len(correlations)}")
                
                # Analizar la estructura de los datos retornados
                if isinstance(correlations, list) and len(correlations) > 0:
                    first_item = correlations[0]
                    print(f"üîç Estructura del primer elemento: {list(first_item.keys()) if isinstance(first_item, dict) else type(first_item)}")
                    
                    # Contar nodos √∫nicos en los datos del servicio
                    unique_nodes = set()
                    for correlation in correlations:
                        if isinstance(correlation, dict):
                            if 'origen' in correlation:
                                unique_nodes.add(correlation['origen'])
                            if 'destino' in correlation:
                                unique_nodes.add(correlation['destino'])
                    
                    print(f"üéØ Nodos √∫nicos en datos del servicio: {len(unique_nodes)}")
                    
                    self.investigation_results["correlation_service_analysis"] = {
                        "service_response_count": len(correlations),
                        "unique_nodes_in_service": len(unique_nodes),
                        "first_item_structure": str(type(first_item)),
                        "sample_data": correlations[:3] if len(correlations) >= 3 else correlations
                    }
                    
                    # COMPARACI√ìN CR√çTICA
                    db_unique = self.investigation_results["database_analysis"]["total_unique_interactions"]
                    service_unique = len(unique_nodes)
                    
                    print(f"\nüîç COMPARACI√ìN CR√çTICA:")
                    print(f"   - Base de datos directa: {db_unique} nodos √∫nicos")
                    print(f"   - Servicio de correlaci√≥n: {service_unique} nodos √∫nicos")
                    print(f"   - UI reportada: 255 nodos")
                    
                    if service_unique == 255:
                        print(f"üéØ PROBLEMA IDENTIFICADO: El servicio de correlaci√≥n est√° retornando {service_unique} nodos")
                        self.investigation_results["problem_diagnosis"] = "El problema est√° en el servicio de correlaci√≥n que retorna m√°s datos de los esperados"
                    elif db_unique == service_unique and service_unique < 255:
                        print(f"üéØ PROBLEMA IDENTIFICADO: El problema est√° en el frontend, transformando {service_unique} en 255 nodos")
                        self.investigation_results["problem_diagnosis"] = "El problema est√° en el frontend durante la transformaci√≥n de datos"
                
            else:
                print("‚ùå El servicio no retorn√≥ datos")
                self.investigation_results["correlation_service_analysis"] = {
                    "service_response_count": 0,
                    "error": "No se obtuvieron datos del servicio"
                }
                
        except Exception as e:
            print(f"‚ùå Error probando servicio de correlaci√≥n: {e}")
            self.investigation_results["correlation_service_analysis"] = {
                "error": str(e)
            }
    
    def analyze_data_normalization(self):
        """Analizar el proceso de normalizaci√≥n de datos"""
        print(f"\nüîß Analizando proceso de normalizaci√≥n de datos...")
        
        try:
            normalizer = DataNormalizerService()
            
            # Probar normalizaci√≥n del n√∫mero objetivo
            normalized = normalizer.normalize_phone_number(self.target_number)
            print(f"üì± Normalizaci√≥n de {self.target_number}: {normalized}")
            
            # Verificar si hay variantes del n√∫mero en la base de datos
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Buscar variantes posibles del n√∫mero
            variants = [
                self.target_number,
                normalized,
                self.target_number[1:] if len(self.target_number) > 10 else None,  # Sin c√≥digo de pa√≠s
                "57" + self.target_number if not self.target_number.startswith("57") else None,  # Con c√≥digo de pa√≠s
            ]
            
            variants = [v for v in variants if v]  # Filtrar None
            
            print(f"üîç Buscando variantes del n√∫mero: {variants}")
            
            total_records = 0
            for variant in variants:
                cursor.execute("""
                    SELECT COUNT(*) FROM cdr_data 
                    WHERE origen = ? OR destino = ?
                """, (variant, variant))
                
                count = cursor.fetchone()[0]
                print(f"  - {variant}: {count} registros")
                total_records += count
            
            print(f"üìä Total de registros considerando variantes: {total_records}")
            
            conn.close()
            
            self.investigation_results["data_flow_analysis"] = {
                "original_number": self.target_number,
                "normalized_number": normalized,
                "variants_tested": variants,
                "total_records_all_variants": total_records
            }
            
        except Exception as e:
            print(f"‚ùå Error analizando normalizaci√≥n: {e}")
            self.investigation_results["data_flow_analysis"] = {
                "error": str(e)
            }
    
    def generate_diagnosis_and_solution(self):
        """Generar diagn√≥stico final y soluci√≥n recomendada"""
        print(f"\nü©∫ GENERANDO DIAGN√ìSTICO FINAL...")
        
        db_analysis = self.investigation_results.get("database_analysis", {})
        service_analysis = self.investigation_results.get("correlation_service_analysis", {})
        
        # An√°lisis de los datos
        db_unique = db_analysis.get("total_unique_interactions", 0)
        service_unique = service_analysis.get("unique_nodes_in_service", 0)
        reported_ui = 255
        
        print(f"üìä RESUMEN DE HALLAZGOS:")
        print(f"   - Base de datos: {db_unique} nodos √∫nicos reales")
        print(f"   - Servicio backend: {service_unique} nodos retornados")
        print(f"   - UI frontend: {reported_ui} nodos mostrados")
        
        # Generar diagn√≥stico espec√≠fico
        if service_unique == reported_ui:
            diagnosis = f"PROBLEMA EN BACKEND: El servicio de correlaci√≥n est√° retornando {service_unique} registros cuando deber√≠a retornar solo {db_unique} interacciones directas."
            solution = """
SOLUCI√ìN RECOMENDADA:
1. Revisar el m√©todo get_correlations() en correlation_service.py
2. Verificar que el filtrado est√© limitando a interacciones directas √∫nicamente
3. Asegurar que no se incluyan datos de otros n√∫meros o per√≠odos
4. Implementar logging detallado para rastrear el flujo de datos
5. Verificar que no se est√©n duplicando registros en la consulta SQL
"""
        elif db_unique == service_unique and service_unique < reported_ui:
            diagnosis = f"PROBLEMA EN FRONTEND: El backend retorna {service_unique} registros correctos, pero el frontend los transforma en {reported_ui} nodos."
            solution = """
SOLUCI√ìN RECOMENDADA:
1. Revisar CorrelationDiagramModal.tsx para verificar transformaci√≥n de datos
2. Analizar graphTransformations.ts para detectar duplicaci√≥n de nodos
3. Verificar NetworkDiagram.tsx para ver si se agregan nodos adicionales
4. Implementar logging en cada paso de transformaci√≥n
5. Verificar que no se est√©n incluyendo nodos de referencia o auxiliares
"""
        else:
            diagnosis = f"PROBLEMA COMPLEJO: Discrepancia en m√∫ltiples capas. DB:{db_unique} -> Service:{service_unique} -> UI:{reported_ui}"
            solution = """
SOLUCI√ìN RECOMENDADA:
1. Investigaci√≥n completa end-to-end con Playwright
2. Logging detallado en cada capa del sistema
3. Revisi√≥n del pipeline completo de datos
4. Verificaci√≥n de cach√© o datos persistentes
5. An√°lisis de transformaciones intermedias
"""
        
        self.investigation_results["problem_diagnosis"] = diagnosis
        self.investigation_results["recommended_solution"] = solution
        
        print(f"\nüéØ DIAGN√ìSTICO:")
        print(diagnosis)
        print(f"\nüí° SOLUCI√ìN:")
        print(solution)
    
    def save_investigation_report(self):
        """Guardar reporte completo de la investigaci√≥n"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = f"investigation_report_3113330727_{timestamp}.json"
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(self.investigation_results, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ Reporte guardado en: {report_path}")
            
            # Crear resumen ejecutivo
            summary_path = f"investigation_summary_3113330727_{timestamp}.md"
            with open(summary_path, 'w', encoding='utf-8') as f:
                f.write(f"""# REPORTE DE INVESTIGACI√ìN - DIAGRAMA CORRELACI√ìN
## N√∫mero: {self.target_number}
## Fecha: {self.investigation_results['investigation_timestamp']}

### PROBLEMA REPORTADO:
El diagrama muestra 255 nodos cuando deber√≠a mostrar solo interacciones directas.

### HALLAZGOS:
- **Base de datos**: {self.investigation_results.get('database_analysis', {}).get('total_unique_interactions', 'N/A')} nodos √∫nicos reales
- **Servicio backend**: {self.investigation_results.get('correlation_service_analysis', {}).get('unique_nodes_in_service', 'N/A')} nodos retornados
- **UI frontend**: 255 nodos mostrados

### DIAGN√ìSTICO:
{self.investigation_results.get('problem_diagnosis', 'Pendiente')}

### SOLUCI√ìN RECOMENDADA:
{self.investigation_results.get('recommended_solution', 'Pendiente')}

### PR√ìXIMOS PASOS:
1. Ejecutar tests de Playwright para validar el flujo completo
2. Implementar la soluci√≥n identificada
3. Verificar la correcci√≥n con testing end-to-end
""")
            
            print(f"üìã Resumen ejecutivo guardado en: {summary_path}")
            
        except Exception as e:
            print(f"‚ùå Error guardando reporte: {e}")
    
    def run_complete_investigation(self):
        """Ejecutar investigaci√≥n completa"""
        print("INICIANDO INVESTIGACION COMPLETA DEL DIAGRAMA")
        print("=" * 60)
        
        # Verificar conexi√≥n a base de datos
        if not self.verify_database_connection():
            print("ERROR: No se puede continuar sin acceso a la base de datos")
            return
        
        # Ejecutar an√°lisis paso a paso
        self.analyze_target_number_in_database()
        self.test_correlation_service_directly()
        self.analyze_data_normalization()
        self.generate_diagnosis_and_solution()
        self.save_investigation_report()
        
        print("\n‚úÖ INVESTIGACI√ìN COMPLETA FINALIZADA")
        print("üìä Revisa los archivos generados para obtener el diagn√≥stico detallado")

if __name__ == "__main__":
    investigator = DiagramInvestigator()
    investigator.run_complete_investigation()