#!/usr/bin/env python3
"""
Test de Verificaci√≥n de Correcci√≥n del Algoritmo de Correlaci√≥n
===============================================================================
Verifica que los n√∫meros objetivo aparezcan correctamente sin prefijo 57
tras la correcci√≥n del algoritmo de correlaci√≥n.

Objetivos de la prueba:
1. Verificar que los n√∫meros objetivo se detecten correctamente
2. Confirmar que numero_celular contiene el formato sin prefijo 57
3. Validar que numero_original mantiene el formato con prefijo 57
===============================================================================
"""

import logging
import json
from datetime import datetime
from services.correlation_analysis_service import get_correlation_service

# Configurar logging para ver los resultados
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_correlation_fix():
    """
    Prueba la correcci√≥n del algoritmo de correlaci√≥n
    """
    print("=" * 80)
    print("TEST: VERIFICACI√ìN DE CORRECCI√ìN DE ALGORITMO DE CORRELACI√ìN")
    print("=" * 80)
    
    # N√∫meros objetivo que Boris espera ver
    target_numbers = ['3224274851', '3208611034', '3104277553', '3102715509', '3143534707', '3214161903']
    
    print(f"N√∫meros objetivo esperados: {target_numbers}")
    print()
    
    try:
        # Obtener servicio de correlaci√≥n
        correlation_service = get_correlation_service()
        
        # Ejecutar an√°lisis con par√°metros espec√≠ficos para mission_MPFRBNsb
        mission_id = "mission_MPFRBNsb"
        start_date = "2021-05-20 10:00:00"
        end_date = "2021-05-20 13:20:00"
        min_coincidences = 1  # Usar 1 para detectar todos los n√∫meros
        
        print(f"Ejecutando an√°lisis para misi√≥n: {mission_id}")
        print(f"Per√≠odo: {start_date} a {end_date}")
        print(f"M√≠nimo coincidencias: {min_coincidences}")
        print()
        
        # Ejecutar an√°lisis
        result = correlation_service.analyze_correlation(
            mission_id=mission_id,
            start_date=start_date,
            end_date=end_date,
            min_coincidences=min_coincidences
        )
        
        if not result.get('success'):
            print(f"‚ùå ERROR en an√°lisis: {result.get('error')}")
            return False
        
        data = result.get('data', [])
        print(f"üìä RESULTADOS DEL AN√ÅLISIS:")
        print(f"   Total n√∫meros con coincidencias: {len(data)}")
        print()
        
        # Verificar cada n√∫mero objetivo
        found_targets = []
        for target in target_numbers:
            found = False
            for correlation in data:
                numero_celular = correlation.get('numero_celular', '')
                numero_original = correlation.get('numero_original', '')
                
                # Verificar si el n√∫mero celular (normalizado) coincide con el objetivo
                if numero_celular == target:
                    found_targets.append({
                        'target': target,
                        'numero_celular': numero_celular,
                        'numero_original': numero_original,
                        'coincidencias': correlation.get('total_coincidencias', 0),
                        'operadores': correlation.get('operadores', [])
                    })
                    found = True
                    break
            
            if found:
                print(f"‚úÖ {target}: ENCONTRADO")
            else:
                print(f"‚ùå {target}: NO ENCONTRADO")
        
        print()
        print("=" * 60)
        print("DETALLES DE N√öMEROS OBJETIVO ENCONTRADOS:")
        print("=" * 60)
        
        for target_info in found_targets:
            print(f"üì± N√∫mero Objetivo: {target_info['target']}")
            print(f"   numero_celular (normalizado): {target_info['numero_celular']}")
            print(f"   numero_original (con prefijo): {target_info['numero_original']}")
            print(f"   Total coincidencias: {target_info['coincidencias']}")
            print(f"   Operadores: {', '.join(target_info['operadores'])}")
            print()
        
        # Estad√≠sticas finales
        print("=" * 60)
        print("ESTAD√çSTICAS DE LA CORRECCI√ìN:")
        print("=" * 60)
        print(f"‚úÖ N√∫meros objetivo detectados: {len(found_targets)}/{len(target_numbers)}")
        print(f"üìà Porcentaje de √©xito: {(len(found_targets)/len(target_numbers)*100):.1f}%")
        
        # Verificar que numero_celular no tiene prefijo 57
        numbers_without_prefix = sum(1 for t in found_targets if not t['numero_celular'].startswith('57'))
        print(f"‚úÖ N√∫meros sin prefijo 57 en numero_celular: {numbers_without_prefix}/{len(found_targets)}")
        
        # Verificar que numero_original s√≠ tiene prefijo 57
        numbers_with_prefix = sum(1 for t in found_targets if t['numero_original'].startswith('57'))
        print(f"‚úÖ N√∫meros con prefijo 57 en numero_original: {numbers_with_prefix}/{len(found_targets)}")
        
        if len(found_targets) >= len(target_numbers) * 0.8:  # 80% o m√°s
            print()
            print("üéâ CORRECCI√ìN EXITOSA: Los n√∫meros objetivo ahora aparecen correctamente")
            return True
        else:
            print()
            print("‚ö†Ô∏è  CORRECCI√ìN PARCIAL: Algunos n√∫meros objetivo a√∫n no aparecen")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_correlation_fix()
    exit(0 if success else 1)